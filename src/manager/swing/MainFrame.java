package manager.swing;
import HTML.Scriere_fisier_html;
import despre.despre;
import  despre.help;
import despre.install.Date__Biserica;
import despre.install.check_exist;
import despre.install.pdf;
import manager.*;
import reminder.Arbore;
import reminder.Data_Nastere_Dreapta_Jos;
import sql_data.Query_table;
import sql_data.Query1;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.lang.reflect.Field;
import java.nio.charset.Charset;


public class MainFrame extends JFrame {
    private int confirmare;
    public static int space, font_size, t, slujire, cat_int, vaduve, raporthtml;
    public static int valuetest, jtableif;
    public static long[] id = new long[10000];
    public static boolean but_adaug;
    public static String value;

    public static String value1, fisa, fel_tabel;
    public static String categorie;
    public static String tabel="Persons";
public static   String reverse1, reverse2, reverse3;
    public MainFrame() throws IOException {
        super("Manager 1.0");

        jtableif=1;
  //      check_exist.check("d:\\Manager\\data\\manual.txt");
   //     check_exist.check("d:\\Manager\\Icons\\nastere1.png");
        check_exist.check("d:\\Manager\\Icons\\icon.png");
        check_exist.check("d:\\Manager\\data\\db.mv.db");
        check_exist.check("D:\\Manager\\data\\db.trace.db");

        initComponents();
        ImageIcon img = new ImageIcon("D:\\Manager\\Icons\\icon.png");
        setIconImage(img.getImage());
     //   jTextField1.requestFocus(true);
    //    setExtendedState(JFrame.MAXIMIZED_BOTH);
     //   jTextField1.requestFocus(true);
        //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      //  setResizable(false);
        setLocation(-2,0);
        setSize(1400,774);

    }

  public static   DefaultTableModel model = new DefaultTableModel();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() throws IOException {
raporthtml=0;
tabel="Persons";

        jMenu1 = new javax.swing.JMenu();
        jMenustatistici = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenucauta = new javax.swing.JMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jToolBar1 = new javax.swing.JToolBar();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButtonadresa = new javax.swing.JLabel();
        jButtoncalendar = new javax.swing.JLabel();
        jButtonslujire = new javax.swing.JLabel();
        jButtonold_man = new javax.swing.JLabel();
        jButtonwork = new javax.swing.JLabel();
        jButtonwidow = new javax.swing.JLabel();
        jButtonage = new javax.swing.JLabel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();

        jButtonBack = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButtonprint = new javax.swing.JMenuItem();
        jButtond = new javax.swing.JButton();
        jButtonc = new javax.swing.JButton();
        categorie = "Persons";
        cat_int =0;
        jPanel1 = new JPanel();
        jPanel2 = new JPanel();
        jPanel4 = new JPanel();
        jLabel6 = new JLabel();
        jPanel8 = new JPanel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jPanel6 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jTable1 = new JTable(model) {
            public boolean isCellEditable(int row, int column) {
                int t = 1;
                Object o = getValueAt(row, column);
                if (t == 1) return false;
                return true;
            }
        };
        // jTable1.setFont(new Font("Helvetica", Font.PLAIN, 16));
        jButtonold_man.setToolTipText("afișază doar pensionarii");

        jButtoncalendar.setToolTipText("Remainder");
        jButtonslujire.setToolTipText("afișază slujitorii bisericii locale");
        jButtonslujire.setEnabled(true);
        jButtonwidow.setToolTipText("afișază doar văduvele și văduvii bisericii");
        jButtonwork.setToolTipText("sortează după locul de muncă");
        jButtonadresa.setToolTipText("sortează după adresa");
        jTable1.setShowHorizontalLines(false);
        jTable1.setShowVerticalLines(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.requestFocus();
        jTable1.setRowHeight(22);
//        jTable1.setRowMargin(4);




        jPanel5 = new JPanel();
        jTextField1 = new JTextField();
        jLabel5 = new JLabel();
        jButtonRefresh = new JButton();
        jRadioButton2 = new JButton();
        jcautarezin = new JButton();
        jButton2 = new JButton();

        jcautarezin.setToolTipText("afișază după ziua de naștere");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new Color(51, 0, 102));
        jPanel4.setBackground(new Color(51, 0, 102));
        jLabel6.setFont(new Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setForeground(new Color(255, 255, 255));
        jLabel6.setText("  Membri \n ");

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addContainerGap(68, Short.MAX_VALUE)
                                .addComponent(jLabel6, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44))
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6)
                                .addContainerGap())
        );

        GroupLayout jPanel8Layout = new GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
                jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
                jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 9, Short.MAX_VALUE)
        );

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel8, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap(36, Short.MAX_VALUE)
                                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24))
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(132, 132, 132)
                                .addComponent(jPanel8, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(420, Short.MAX_VALUE))
        );

        jLabel1.setBackground(new Color(51, 0, 102));
        jLabel1.setFont(new Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new Color(51, 0, 102));

Query1.cauta_nume_biserica("Biserica");



        jLabel1.setText("<HTML><CENTER>"+Query1.Biserica[1]+"</CENTER></HTML");

        jLabel2.setBackground(new Color(0, 204, 204));
        jLabel2.setFont(new Font("Tahoma", 0, 13)); // NOI18N
        jLabel2.setForeground(new Color(0, 153, 153));
        jLabel2.setText("Suport: (+04) 0720847347 Daniel");

        jPanel6.setBackground(new Color(255, 255, 255));
            if (tabel != "Copii") {
            model.addColumn("     Nr. ");
            model.addColumn("Nume Prenume");
            model.addColumn("Data Nasterii");
            model.addColumn("Adresa");
            model.addColumn("Telefon");
            model.addColumn("Ocupatia");
            // model.addColumn("Activitate in Biserica");
            }






        GroupLayout jPanel6Layout = new GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
                jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 1001, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
                jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
        );

        jPanel5.setBackground(new Color(255, 255, 255));

        jTextField1.setFont(new Font("Tahoma", 1, 13)); // NOI18N
        jTextField1.setForeground(new Color(51, 0, 102));
        jTextField1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new KeyAdapter() {
            public void keyPressed(KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jLabel5.setBackground(new Color(51, 0, 102));
        jLabel5.setFont(new Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setForeground(new Color(51, 0, 102));
        jLabel5.setText("    Cauta:");

        jButtonRefresh.setForeground(new Color(51, 0, 102));
        jButtonRefresh.setActionCommand("data nasterii");
        jButtonRefresh.setIcon(new ImageIcon("d:/Manager/Icons/refresh.jpg")); // NOI18N
        jButtonRefresh.setLabel("alfabetic");

        jRadioButton2.setForeground(new Color(51, 0, 102));
        jRadioButton2.setLabel("+ (membru nou)");


        jRadioButton2.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {
            //    if (PersonalFile.check_begin == 1 ) {
            //       JOptionPane.showMessageDialog(null, "Deja aveti o Fișă Personală deschisă. Vă rog închideți Fișele Personale vechi și încercați din nou");
             //   } else {


        //        System.out.print("Comitet table = "+ tabel);
                if (tabel=="Comitet"){ comitet_form c = new comitet_form();
                    c.setVisible(true);
                }else{


                    but_adaug = true;


                    PersonalFile p =PersonalFile.getInstance(categorie);
                    p.setVisible(true);



             //   }


            }}
        });


        jcautarezin.setBackground(new Color(0, 153, 153));
        jcautarezin.setForeground(new Color(51, 0, 102));
        jcautarezin.setIcon(new ImageIcon("d:/Manager/Icons/nastere1.png")); // NOI18N
        jcautarezin.setText("ns.");
        jcautarezin.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {

                Query1.cauta_birthdate(tabel);
                search_birthdate_no_year(tabel);
                s(tabel);

            }


        });


        jButton2.setBackground(new Color(0, 153, 153));
        jButton2.setForeground(new Color(51, 0, 102));
        jButton2.setIcon(new ImageIcon("d:/Manager/Icons/Untitled.png")); // NOI18N
   //     jButton2.setPreferredSize(new Dimension(20,50));


        jButton2.setText("jButton2");


        jButton2.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
            //    Toolkit.getDefaultToolkit().beep();

                cauta_dup_jTextField1(tabel);

                }  });


        jButtonRefresh.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                af_lista(tabel);
                af_lista(tabel);


            }


        });


        Query1.cauta(tabel);
        Query1.cautaa(tabel);
        Query1.cautaaa(tabel);


        s(tabel);


        jButton2.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {

                cauta_dup_jTextField1(tabel);
            }

        });

        jTable1.addKeyListener
                (new KeyAdapter() {
                    public void keyPressed(KeyEvent e) {

                        int key = e.getKeyCode();
                        if (key == KeyEvent.VK_R){
                            Data_Nastere_Dreapta_Jos d = new Data_Nastere_Dreapta_Jos();
                            d.setVisible(true);

                        }
                        if (key == KeyEvent.VK_A){

                            Arbore a = new Arbore();

                         //   a.setVisible(true);

                        }




                        if (key == KeyEvent.VK_P){
                            t = jTable1.getSelectedRow() + 1;
                            int c = jTable1.getSelectedColumn();

                            valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                            valuetest = valuetest-1;

                            fisa="printare";
                            NewJFrame n = null;
                            try {
                                n = new NewJFrame();

                            } catch (BadLocationException e1) {
                                e1.printStackTrace();
                            }
                            n.setVisible(true);

                        }


                        if (key == KeyEvent.VK_E){
                            t = jTable1.getSelectedRow() + 1;
                            int c = jTable1.getSelectedColumn();

                            valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                            valuetest = valuetest-1;

                            fisa="editare";
                            NewJFrame n = null;
                            try {
                                n = new NewJFrame();

                            } catch (BadLocationException e1) {
                                e1.printStackTrace();
                            }
                            n.setVisible(true);

                        }


                        if (key == KeyEvent.VK_T){
                            t = jTable1.getSelectedRow() + 1;
                            int c = jTable1.getSelectedColumn();

                            valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                            valuetest = valuetest-1;


                            FisaPersonalaPrintare n = null;
                            try {
                                n = new FisaPersonalaPrintare();
                            } catch (BadLocationException e1) {
                                e1.printStackTrace();
                            }
                            n.setVisible(true);

                        }


                        if (key == KeyEvent.VK_ENTER) {
                        if (MainFrame.tabel=="Comitet"){

                            t = jTable1.getSelectedRow() + 1;
                            int c1 = jTable1.getSelectedColumn();
                            value = jTable1.getModel().getValueAt(t - 1, 0).toString();
                            value1 = jTable1.getModel().getValueAt(t - 1, 2).toString();

                            comitet_form c = new comitet_form();
                        c.show();
                        }else{

                            t = jTable1.getSelectedRow() + 1;
                            int c = jTable1.getSelectedColumn();

                            valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                            valuetest = valuetest-1;

                        //    System.out.print("Valuetest is "+valuetest);

                            //value = jTable1.getModel().getValueAt(t - 1, 1).toString();
                            //value1 = jTable1.getModel().getValueAt(t - 1, 2).toString();
                     //       System.out.println("VALUETESTED " + valuetest);

                            Query1.cauta_dupa_ip_tabel(tabel);
                            Query1.cauta_dupa_ip_secound(tabel);
                            Query1.cauta_dupa_ip_third(tabel);
                          //  System.out.println("id-ul estte" + Query1.id[t]);


                          //  Edito_Manager e1 = new Edito_Manager(categorie);


                            PersonalFile p =PersonalFile.getInstance(categorie);
                            p.setVisible(true);

                        }}

                        if (key == KeyEvent.VK_I) {

                            t = jTable1.getSelectedRow() + 1;
                            int c = jTable1.getSelectedColumn();


                            valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                            valuetest = valuetest-1;

                        //    value = jTable1.getModel().getValueAt(t - 1, 1).toString();
                          //  value1 = jTable1.getModel().getValueAt(t - 1, 2).toString();
                        //    System.out.println("SELECTAT E " + valuetest);

                            Query1.cauta_dupa_ip_tabel(MainFrame.tabel);
                            Query1.cauta_dupa_ip_secound(MainFrame.tabel);
                            Query1.cauta_dupa_ip_third(MainFrame.tabel);
                         //   System.out.println("id-ul estte" + Query1.id[t]+" NUMELE ESTE"+Query1.firstName[t]);
                            pictures.img = Query1.pi[Query1.i];
                            try {
                                scurtatura_imagine(pictures.img);
                            } catch (IOException e1) {
                                e1.printStackTrace();
                            }


                            pictures p = new pictures();
                            p.afisare();

                        }
                        if (key == KeyEvent.VK_DELETE) {
                            t = jTable1.getSelectedRow() + 1;
                            int c = jTable1.getSelectedColumn();
                            valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                            valuetest = valuetest-1;



                            int age=0;
                            String input = JOptionPane.showInputDialog("SUNTETI SIGUR - Daca continuati veti sterge toate datele din acest program? !!!\n "
                                    + " Pentru Da tastati codul 171" );

                            try {
                                age = Integer.parseInt(input);
                            } catch (NumberFormatException nfe) {
                                nfe.printStackTrace();}

                            if (age == 171) {


                                delete.sterge_171(tabel);


                            /*   try {
                                    sterge_persoana_dupa_ip.delete_data_dupa_click(Home_search.tabel,"f","F");
                                } catch (SQLException e1) {
                                    e1.printStackTrace();
                                }
*/



                        } else {
                                    JOptionPane.showMessageDialog(null, "Datele nu au fost sterse.");


                                }}





                    }
                });







                jTextField1.addKeyListener
                (new KeyAdapter() {
                     public void keyPressed(KeyEvent e) {
                         int key = e.getKeyCode();


                         if (key == KeyEvent.VK_ENTER) {


                         
                             Toolkit.getDefaultToolkit().beep();

                             cauta_dup_jTextField1(tabel);
                             cauta_dup_jTextField1(tabel);

                 }}}
                );


        jTable1.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "Enter");
        jTable1.getActionMap().put("Enter", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                //do something on JTable enter pressed
            }
        });


        jTable1.addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent evt) {

             //   if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3){
               //    System.out.print("Left clicked");}

                if (evt.getClickCount() == 2) {

                    if (MainFrame.tabel=="Comitet"){ comitet_form c = new comitet_form();
                        c.show();
                    }else{
              //      System.out.println("Double-clicked on: " + toString());
                        t = jTable1.getSelectedRow() + 1;
                        int c = jTable1.getSelectedColumn();

                        valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                        valuetest = valuetest-1;


                        valuetest = Integer.parseInt(jTable1.getModel().getValueAt(t - 1, 0).toString());
                        valuetest = valuetest-1;

                        value = jTable1.getModel().getValueAt(t - 1, 1).toString();
                        value1 = jTable1.getModel().getValueAt(t - 1, 2).toString();
                   //     System.out.println("SELECTAT E " + value + " and  " + value1);

                    Query1.cauta_dupa_ip_tabel(tabel);
                    Query1.cauta_dupa_ip_secound(tabel);
                    Query1.cauta_dupa_ip_third(tabel);
               //     System.out.println("id-ul estte" + Query1.id[t]);

                        PersonalFile p =PersonalFile.getInstance(categorie);
                        p.setVisible(true);

                    }}

            }

        });


        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
                jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 96, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField1, GroupLayout.PREFERRED_SIZE, 120, GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtoncalendar)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonslujire)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonold_man)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonwork)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonwidow)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonadresa)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonRefresh)
                                .addGap(18, 18, 18)
                                .addComponent(jRadioButton2)
                                .addGap(18, 18, 18)
                                .addComponent(jcautarezin,  GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))
        );
        jPanel5Layout.setVerticalGroup(
                jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(jTextField1)
                                .addComponent(jButtoncalendar)
                                .addComponent(jButtonslujire)
                                .addComponent(jButtonold_man)
                                .addComponent(jButtonwork)
                                .addComponent(jButtonwidow)
                                .addComponent(jButtonadresa)
                                .addComponent(jButtonRefresh)
                                .addComponent(jRadioButton2)
                                .addComponent(jcautarezin, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addComponent(jButton2, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );


        jToolBar1.setRollover(true);
        jToolBar1.setFloatable(false);

        //SynthArrowButton jButtonm ;

        //    jToolBar1.add(jButtonm);
        jButton1.setText("Membri");
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {


                model.setColumnCount(0);
                model.addColumn("     Nr. ");
                model.addColumn("Nume");

                model.addColumn("Data Nasterii");
                model.addColumn("Adresa");
                model.addColumn("Telefon");


                model.addColumn("Ocupatia");
                model.addColumn("Activitate în Biserică");







                jLabel6.setText("  Membri");
                jRadioButton2.setEnabled(true);
                jButtonslujire.setEnabled(true);
             tabel = "Persons";cat_int =0;
                slujire=1;
                jButtonadresa.setBackground(new Color(255, 255, 255));
                jButtonadresa.enable();
                jButtonage.setBackground(new Color(255, 255, 255));
                jButtonage.enable();
                jButtonold_man.setBackground(new Color(255, 255, 255));
                jButtonold_man.enable();
                jButtonwidow.setBackground(new Color(255, 255, 255));
                jButtonwidow.enable();
                jButtonwork.setBackground(new Color(255, 255, 255));
                jButtonwork.enable();






                jPanel2.setBackground(new Color(51, 0, 102));
            jPanel4.setBackground(new Color(51, 0, 102));

                af_lista(tabel);

                jButtonadresa.show();
                jButtonage.show();
                jButtonold_man.show();
                jButtonwidow.show();
                jButtonwork.show();


                if (tabel != "Copii") {
                    model.setColumnCount(0);
                    model.addColumn("     Nr. ");
                    model.addColumn("Nume");

                    model.addColumn("Data Nasterii");
                    model.addColumn("Adresa");
                    model.addColumn("Telefon");


                    model.addColumn("Ocupatia");
                    model.addColumn("Activitate în Biserică");
                }
                af_lista(tabel);
            }
        });

      //  Image img = ImageIO.read(getClass().getResource("resources/water.bmp"));
    //    jButton1.setIcon(new ImageIcon(img));
      //  jToolBar1.add(jButtonBack);
        jToolBar1.add(jButton1);


        jButton3.setText("Apartinatori");
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
            private void jButton3ActionPerformed(ActionEvent evt) {
                tabel = "Apartinatori";

                jRadioButton2.setEnabled(true);

                jButtonadresa.setBackground(new Color(255, 255, 255));
                jButtonadresa.enable();
                jButtonage.setBackground(new Color(255, 255, 255));
                jButtonage.enable();
                jButtonold_man.setBackground(new Color(255, 255, 255));
                jButtonold_man.enable();
                jButtonwidow.setBackground(new Color(255, 255, 255));
                jButtonwidow.enable();
                jButtonwork.setBackground(new Color(255, 255, 255));
                jButtonwork.enable();
                jButtonslujire.setEnabled(false);



                jLabel6.setText("Aparținători");
                if (tabel != "Copii") {
                    jPanel2.setBackground(Color.ORANGE);
                    jPanel4.setBackground(Color.orange);
                    model.setColumnCount(0);
                    model.addColumn("     Nr. ");
                    model.addColumn("Nume Prenume");

                    model.addColumn("Data Nasterii");
                    model.addColumn("Adresa");
                    model.addColumn("Telefon");

                    model.addColumn("Ocupatia");
                  //  model.addColumn("Activitate in Biserica");
                }

                af_lista(tabel);
            }

        });

        jToolBar1.add(jButton3);

        jButton4.setText("Copii");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
            private void jButton4ActionPerformed(ActionEvent evt) {
                jButtonslujire.setEnabled(false);
        tabel = "Copii";
                jLabel6.setText("  Copiii");
                jRadioButton2.setEnabled(true);
                jButtonadresa.setBackground(new Color(44, 44, 47));
                jButtonadresa.disable();
                jButtonage.setBackground(new Color(44, 44, 47));
                jButtonage.disable();
                jButtonold_man.setBackground(new Color(44, 44, 47));
                jButtonold_man.disable();
                jButtonwidow.setBackground(new Color(44, 44, 47));
                jButtonwidow.disable();
                jButtonwork.setBackground(new Color(44, 44, 47));
                jButtonwork.disable();




   if (MainFrame.tabel == "Copii"){

       jPanel2.setBackground(Color.green);
       jPanel4.setBackground(Color.green);
                model.setColumnCount(0);
                model.addColumn("     Nr. ");
                model.addColumn("Nume Prenume");

                model.addColumn("Data Nasterii");
                model.addColumn("Adresa");
                model.addColumn("Grupa");
                model.addColumn("Orchestră");
                model.addColumn("Altele:");
                jTable1.repaint();


       jTable1.setShowHorizontalLines(false);
       jTable1.setShowVerticalLines(false);
       jScrollPane1.setViewportView(jTable1);
       jTable1.requestFocus();
       af_lista(tabel);


            }}

        });
       // jTable1.getRowHeight(40);
        jToolBar1.add(jButton4);

        jButton5.setText("Transferati");


        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
                tabel = "Transferati";
                jButtonslujire.setEnabled(false);
                jRadioButton2.disable();

                jButtonadresa.setBackground(new Color(44, 44, 47));
                jButtonadresa.disable();
                jButtonage.setBackground(new Color(44, 44, 47));
                jButtonage.disable();
                jButtonold_man.setBackground(new Color(44, 44, 47));
                jButtonold_man.disable();
                jButtonwidow.setBackground(new Color(44, 44, 47));
                jButtonwidow.disable();
                jButtonwork.setBackground(new Color(44, 44, 47));
                jButtonwork.disable();

                jLabel6.setText(" Transferați");
                jPanel2.setBackground(Color.LIGHT_GRAY);
                jPanel4.setBackground(Color.LIGHT_GRAY);
                if (tabel != "Copii") {
                    model.setColumnCount(0);
                    model.addColumn("     Nr. ");
                    model.addColumn("Nume Prenume");

                    model.addColumn("Data Nasterii");
                    model.addColumn("Adresa");
                    model.addColumn("Telefon");

                    model.addColumn("Ocupatia");
                    model.addColumn("Data transfer");
                }


                af_lista(tabel);

            }

            private void jButton5ActionPerformed(ActionEvent evt) {


            }
        });
        jToolBar1.add(jButton5);

        String current = new java.io.File( "." ).getCanonicalPath();
        System.setProperty("file.encoding", "UTF-16");
       ImageIcon iconp = new ImageIcon(current+"\\Icons\\print32.png");
        ImageIcon iconh = new ImageIcon(current+"\\Icons\\html.jpg");
        ImageIcon iconb = new ImageIcon(current+"\\Icons\\ slujire1.png");
       JMenuItem menuprint = new JMenuItem("Printare", iconp);



        JMenuItem menuraporthtml = new JMenuItem("Raport HTML", iconh);

     //   JMenuItem menu_alege_biserica = new JMenuItem("Alege Biserica",null);


space=22;
 font_size = 13;


        jButton13.setText("Font + ");
        jButton13.setFocusable(false);
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                font_size=font_size+1;
font_size = font_size+1;
                jTable1.setFont(new Font("Helvetica", Font.PLAIN, font_size));



              /*  DefaultTableCellRenderer r = new DefaultTableCellRenderer() {
                    Font font = new Font("Helvetica", Font.BOLD, font_size);

                    @Override
                    public Component getTableCellRendererComponent(JTable table,
                                                                   Object value, boolean isSelected, boolean hasFocus,
                                                                   int row, int column) {
                        super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
                                row, column);
                        setFont(font);
                        return this;
                    }};
                jTable1.getColumnModel().getColumn(1).setCellRenderer(r);*/

            //   Fonts_t.fonts_tabel("Helvetica", "Font.PLAIN", 13
         //      );


                jTable1.repaint();
                af_lista(tabel);
                jButton17.setText(" "+font_size);
                jButton17.repaint();
            }});


        space=22;
        //jTable1.setAutoCreateRowSorter(true);
        jButton15.setText(" Marime spatii +");
        jButton15.setFocusable(false);
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jTable1.requestFocus();

                space = space+2;
                jTable1.setRowHeight(space);

                jTable1.repaint();
                af_lista(tabel);
            }});


        jButton16.setText(" Marime spatii -");
        jButton16.setFocusable(false);
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                jTable1.requestFocus();

                space = space-2;
                jTable1.setRowHeight(space);

                jTable1.repaint();
                af_lista(tabel);
            }});






        jButton14.setFocusable(false);
        jButton14.setText("  Font -");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                font_size=font_size-1;

                jTable1.setFont(new Font("Helvetica", Font.PLAIN, font_size));

                jTable1.repaint();
                af_lista(tabel);
                jButton17.setText(" "+font_size);
                jButton17.repaint();

            }});



        jButtonprint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               pdf p = new pdf();
               p.printare();

            }});
        jButtonprint.setFocusable(false);
        jButtonprint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonprint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jButtond.setText("Decedati");
        jButtond.setFocusable(false);
        jButtond.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtond.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }


            private void jButton1ActionPerformed(ActionEvent evt) {
                jButtonslujire.setEnabled(false);
                tabel = "Decedati";
                jRadioButton2.setEnabled(false);
                jLabel6.setText("  Decedați");
                if (tabel == "Decedati") {
                    jPanel2.setBackground(Color.darkGray);
                    jPanel4.setBackground(Color.darkGray);
                    model.setColumnCount(0);
                    model.addColumn("     Nr. ");
                    model.addColumn("Nume Prenume");

                    model.addColumn("Data Nasterii");
                    model.addColumn("Adresa");
                    model.addColumn("Tel.");
                    model.addColumn("Ocupatia");
                    model.addColumn("Data Deces");
                }


                af_lista(tabel);

            }
        });

        jButtonc.setText("Comitet");
        jButtonc.setFocusable(false);
        jButtonc.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonc.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }

            private void jButton1ActionPerformed(ActionEvent evt) {
tabel = "Comitet";
                if (MainFrame.tabel == "Comitet"){
                    model.setColumnCount(0);
                    model.addColumn("     Nr. ");
                    model.addColumn("Data");
                    model.addColumn("Subiect");
                    model.addColumn("Domeniu");
                    model.addColumn("CONTINUT");

                    jTable1.repaint();}
                Query1.cauta_comitet("Comitet");

                MainFrame.s_comitet("Comitet");
            }
        });


        ImageIcon iconslujire = new ImageIcon("D:\\Manager\\Icons\\slujire3.jpg");
        ImageIcon iconcalendar = new ImageIcon("D:\\Manager\\Icons\\calendar.png");
        //JMenuItem old_man = new JMenuItem("Printare", iconold_man);
        ImageIcon iconold_man = new ImageIcon("D:\\Manager\\Icons\\old_man.png");
        JMenuItem old_man = new JMenuItem("Printare", iconold_man);
        ImageIcon iconwork = new ImageIcon("D:\\Manager\\Icons\\work11.png");
        JMenuItem work = new JMenuItem("Printare", iconp);
        ImageIcon iconcivil = new ImageIcon("D:\\Manager\\Icons\\civil.png");
        JMenuItem civil = new JMenuItem("Printare", iconp);
        ImageIcon iconwidow = new ImageIcon("D:\\Manager\\Icons\\widow.png");
        JMenuItem widow = new JMenuItem("Printare", iconp);
        ImageIcon bisericaicon = new ImageIcon("D:\\Manager\\Icons\\work11.png");
        JMenuItem bis = new JMenuItem("Printare", bisericaicon);

        jButtonadresa.setIcon(iconcivil);
        JLabel label = new JLabel("Username");

        jButtonadresa.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {

                    Query1.cauta_adresa(tabel);
                    s(tabel);

            }

        });



        jButtoncalendar.setIcon(iconcalendar);
        jButtoncalendar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                Data_Nastere_Dreapta_Jos d1 = new Data_Nastere_Dreapta_Jos();
                d1.setVisible(true);
            }

        });


        jButtonslujire.setIcon(iconslujire);
        jButtonslujire.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                model.setColumnCount(0);
                model.addColumn("     Nr. ");
                model.addColumn("Nume Prenume");
                model.addColumn("Data Nasterii");
                model.addColumn("Adresa");
                model.addColumn("Telefon");
                model.addColumn("Ocupatia");
                model.addColumn("Activitate in Biserica");
                    Query1.dupa_slujire(MainFrame.tabel);
slujire=1;
                s(tabel);

            }

        });




        jButtonold_man.setIcon(iconold_man);

        jButtonold_man.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {


                vaduve=1;
                Query1.cauta_pensionari(tabel);
                s(tabel);

            }

        });


        jButtonwidow.setIcon(iconwidow);
        jButtonwidow.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {

                    vaduve = 1;
                    Query1.cauta_numai_vaduve(tabel);
                    s(tabel);


            }

        });
        jButtonwork.setIcon(iconwork);
        jButtonwork.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {

                    Query1.cauta_work(tabel);
                    s(tabel);

            }

        });


        JLabel l = new JLabel("                                                                                                                                            \n" +
                            "                                                                                                                                                                                    ");

        jToolBar1.add(jButtond);
        jToolBar1.add(jButton13);
        jButton17.setText(""+ font_size);
        jToolBar1.add(jButton17);
        jToolBar1.add(jButton14);
        jToolBar1.add(jButton15);

        jToolBar1.add(jButton16);
    //    jToolBar1.add(bis);
     //   jToolBar1.add(l);
      //  jToolBar1.add(jButton14);


        jToolBar1.add(jButtonprint);
        jToolBar1.add(jButtonadresa);

       // jToolBar1.add(jButtonc);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(52, 52, 52)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(110, 110, 110)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(57, Short.MAX_VALUE))
                        .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(1, 1, 1)
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(jLabel2)
                                                .addGap(18, 18, 18)
                                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(91, 91, 91)
                                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ImageIcon icon = new ImageIcon("D:\\Manager\\Icons\\exit1.png");
        ImageIcon icon_biserica = new ImageIcon("D:\\Manager\\Icons\\slujire3.jpg");

        JMenuItem eMenuItem = new JMenuItem("Ieșire", icon);
        eMenuItem.setMnemonic(KeyEvent.VK_E);
        eMenuItem.setToolTipText("Exit application");
        eMenuItem.addActionListener((ActionEvent event) -> {
                    System.exit(0);

    });
        JMenuItem Menubiserica = new JMenuItem("Biserica", icon_biserica);
        eMenuItem.setMnemonic(KeyEvent.VK_B);
        eMenuItem.setToolTipText("Setari Biserica");
        Menubiserica.addActionListener((ActionEvent event) -> {
            Date__Biserica db = new Date__Biserica();
            db.setVisible(true);

        });

        JMenuItem Menucautari = new JMenuItem("Caută după vârstă");
        eMenuItem.setMnemonic(KeyEvent.VK_V);
        eMenuItem.setToolTipText("după vârstă");
        Menucautari.addActionListener((ActionEvent event) -> {
       Query1.cautaaa_order_by_transfer(tabel);
            s(tabel);


        });

        JMenuItem Menucautari_deces = new JMenuItem("Caută după DATĂ DECES!");

        eMenuItem.setToolTipText("după vârstă");
        Menucautari_deces.addActionListener((ActionEvent event) -> {

           if(tabel=="Decedati"){
            Query1.cautaaa_order_by_deces(tabel);
            s(tabel);} else {JOptionPane.showMessageDialog(null, "Această căutare se aplică doar persoanelor decedate. \nPentru a afișa lista persoanelor decedate în funcție de anul decesului vă rog selectați mai întâi 'Decedați' și apoi încercați din nou. \nMulțumesc!");}


        });
        JMenuItem Menucautari_transfer = new JMenuItem("Caută după DATĂ TRANSFER!");

        eMenuItem.setToolTipText("după TRANSFER");
        Menucautari_transfer.addActionListener((ActionEvent event) -> {
            if(tabel=="Transferati"){
                Query1.cautaaa_order_by_deces(tabel);
                s(tabel);} else {JOptionPane.showMessageDialog(null, "Această căutare se aplică doar persoanelor transferate. \nPentru a afișa lista persoanelor transferate în funcție de data transferului vă rog selectați mai întâi 'Transferați' și apoi încercați din nou. \nMulțumesc!");}


        });




        menuprint.setMnemonic(KeyEvent.VK_P);
        menuraporthtml.addActionListener((ActionEvent event) -> {

raporthtml=1;

        });
        menuprint.addActionListener((ActionEvent event) -> {



            pdf p = new pdf();
            p.printare();

        });





        JMenuItem Menucautari_statistice = new JMenuItem("STATISTICĂ!");

        eMenuItem.setToolTipText("după TRANSFER");
        Menucautari_statistice.addActionListener((ActionEvent event) -> {
        Query1.cauta_statistici("Persons");
            model.setRowCount(1);
            model.setColumnCount(2);
            model.setColumnCount(0);
            model.addColumn("STATISTICI");

            int n = Query1.femei;
            int v = Query1.total;
            int percent = (int) n * 100/v;

            model.addRow(new Object[]{"                                  STATISTICA MEMBRILOR BISERICII TOTAL MEMBRI: "+v });
            model.addRow(new Object[]{"     "});

            model.addRow(new Object[]{"      Nr. Femei: "+Query1.femei+"  (aprox. "+percent+"%)" });
            percent=0;n=0;v=0;
            n = Query1.barbati;
            v = Query1.total;
            percent = n * 100/v;

            model.addRow(new Object[]{"      Bărbați = "+Query1.barbati+"  (aprox. "+percent+"%)"});
            model.addRow(new Object[]{"      Necompletați = "+Query1.neselectat+" "});





        });


















        jMenu1.setText("File");

        jMenustatistici.setText("Statistici");
      jMenu1.add( menuraporthtml);
        jMenu1.add(menuprint);



        jMenu1.add(eMenuItem);


       // JMenuBar jMenuBar1;
        jMenuBar1.add(jMenu1);



        ImageIcon icon_aj = new ImageIcon("D:\\Manager\\Icons\\help1.png");


        JMenuItem aj = new JMenuItem("Ajutor", icon_aj);
        jMenu3.add(aj);
        jMenu3.setText("Ajutor");
        jMenucauta.setText("Cautari");

        aj.addActionListener((ActionEvent event) -> {
            help hp =  null;
            try {
                hp = new help();
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            hp.show();

        });



        jMenu2.setText("Despre");
        jMenu2.add(Menubiserica);


        jMenucauta.add(Menucautari);
        jMenucauta.addSeparator();
        jMenucauta.add(Menucautari_deces);
        jMenucauta.addSeparator();
        jMenucauta.add(Menucautari_transfer);
        jMenucauta.addSeparator();

        jMenucauta.add(Menucautari_statistice);

        ImageIcon icon_despre = new ImageIcon("D:\\Manager\\Icons\\des.png");
        JMenuItem despre = new JMenuItem("Despre", icon_despre);
        despre.setMnemonic(KeyEvent.VK_D);
      //  despre.setToolTipText("Exit application");
        despre.addActionListener((ActionEvent event) -> {
           despre d = new despre();
            d.setVisible(true);
           d.show();


        });


        jMenu2.add(despre);
        jMenuBar1.add(jMenu2);
        jMenuBar1.add(jMenu3);
        jMenuBar1.add(jMenucauta);






        setJMenuBar(jMenuBar1);
        setJMenuBar(eMenuItem);

        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
            public void valueChanged(ListSelectionEvent event) {
         //    System.out.print("selected");
             //   JOptionPane.showMessageDialog(null, "Deja aveti o Fișă Personală deschisă. Vă rog închideți Fișele Personale vechi și încercați din nou");
            }
        });


        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );





        pack();
    }// </editor-fold>

    private void setJMenuBar(JMenuItem eMenuItem) {
    }

    private void jTextField1ActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:
    }


    private void jTextField1KeyPressed(KeyEvent evt) {
        if (evt.getKeyCode() == evt.VK_ENTER) {
            Query_table.cauta1(tabel);
        }


    }


    //DefaultTableModel model = new DefaultTableModel();

    public static void af_lista(String tabel) {




        s_sql(tabel);

        s(tabel);

    }
private void cauta_dup_jTextField1(String tabel){

    jtableif=0;

    jTable1.getColumnModel().getColumn(3).setHeaderValue("Adresă");
    String caut = jTextField1.getText();

    String activitate, activitate1;
    activitate=""; activitate1="";

        Query_table.cauta1_combinat(tabel);
        model.setRowCount(0);

    String membri = new String();
    membri="";

    String alege1;
    String alege; alege="";

    if (tabel == "Persons"){membri="";} else{membri=tabel;}

    if (tabel == "Persons"){membri="";} else{membri=tabel;}

int k=0;
    for (  int p=0; p< Query_table.i; p++) {
k++;
        id[k]= Long.parseLong(Query_table.id[k]);


     //   System.out.println("id valuetest"+id[k]);

        if (tabel == "Copii"){alege=Query_table.wife[k];
            alege1=Query_table.wife[k+1];
        }else {   alege=Query_table.work[k];
            alege1=Query_table.work[k+1];
        }

        if (tabel == "Persons"){ if (slujire==1){activitate =Query_table.slujire[k];
            activitate1=Query_table.slujire[k+1];}
        }
        if (tabel == "Transferati"){ String data_pt_transfer1 = ConversUserData.con_home_search1(Query1.transfer[k]);
            String data_pt_transfer11 = ConversUserData.con_home_search1(Query1.transfer[k+1]);


            activitate =""+data_pt_transfer1;
            activitate1=data_pt_transfer11;
        }else {
        }
        if (tabel == "Decedati"){ String data_pt_transfer1 = ConversUserData.con_home_search1(Query1.transfer[k]);
            String data_pt_transfer11 = ConversUserData.con_home_search1(Query1.transfer[k+1]);


            activitate =""+data_pt_transfer1;
            activitate1=data_pt_transfer11;
        }else {
        }


    if (Query_table.firstName[k] == null) {   } else {
       // String nastere = ConversUserData.con_home_search1(Query_table.birthDate[k]);
      //  model.addRow(new Object[]{k, Query_table.firstName[k]+" "+ Query_table.lastName[k], nastere, Query_table.adress[k], Query_table.tel1[k], alege, activitate});

            id[k]= Long.parseLong(Query_table.id[k]);


              //  String nastere1 = ConversUserData.con_home_search1(Query_table.birthDate[k ]);


  //  if (k == Query_table.i) {
        id[k]= Long.parseLong(Query_table.id[k]);
      //  if (Query_table.firstName[k + 1] == null) {
     //   } else {
            String nastere1 = ConversUserData.con_home_search1(Query_table.birthDate[k ]);
            model.addRow(new Object[]{k  , Query_table.firstName[k]+" "+ Query_table.lastName[k], nastere1, Query_table.adress[k], Query_table.tel1[k ], alege1, activitate1});
    //    }

 //   }
    }


    }





slujire = 0;

   //     System.out.println("ENTER pressed");

}

private static void search_birthdate_no_year(String table){

    Query1.cauta_birthdate(table);
    s(tabel);

}


    private static  void s_sql(String tabel) {



        Query1.cauta(tabel);
        Query1.cautaa(tabel);
        Query1.cautaaa(tabel);


    }
    public  static void s_comitet(String tabel) {
      String afisare_Tabel ;
        model.setRowCount(0);
String membri = new String();
membri="";

String alege1; alege1="";
String alege; alege="";

        for (  int k=0; k < Query1.i; k++) {

            id[k]= Long.parseLong(Query1.id[k+1]);
                if (Query1.firstName[k] == null) {
            } else {

                model.addRow(new Object[]{k , Query1.firstName[k], Query1.lastName[k],Query1.birthDate[k], Query1.adress[k], Query1.tel1[k],  alege});
            }

            if (k<Query1.i && Query1.firstName[k] != null){
                id[k]= Long.parseLong(Query1.id[k+1]);
                if (Query1.firstName[k + 1] == null) {
                } else {
                    model.addRow(new Object[]{k + 1 , Query1.firstName[k + 1], Query1.lastName[k + 1], Query1.birthDate[k+1], Query1.adress[k + 1], Query1.tel1[k + 1], alege1 });
                }
            }}


}

    public static void s(String tabel) {
        jTable1.getColumnModel().getColumn(3).setHeaderValue("Adresă");

        if (raporthtml==1){   try {
            Scriere_fisier_html.createFileUsingFileClass();
        } catch (IOException e) {
            e.printStackTrace();
        }}

        String afisare_Tabel ;
        model.setRowCount(0);
        String membri = new String();
        membri="";
        if (tabel == "Persons"){membri="";} else{membri=tabel;}
      //  System.out.println("Membri is "+membri);

       String activitate, activitate1;
          activitate=""; activitate1="";
        String alege1; alege1="";
        String alege; alege="";
int t_ultim;
t_ultim=Query1.i;



        Scriere_fisier_html s = new Scriere_fisier_html();
        try {
            s.createFileUsingFileClass();
        } catch (IOException e) {
            e.printStackTrace();
        }

        int i_html =0;
        int k=0;
        for (int i1=0; i1 < Query1.i; i1++) {

k++;

        if (vaduve==1){ Query1.adress[k] = Query1.wife[k];
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Văduv(ă)");}


            id[k]= Long.parseLong(Query1.id[k]);

            if (tabel == "Copii"){alege=Query1.wife[k];
                alege1=Query1.wife[k+1];
            }else {   alege=Query1.work[k];
                alege1=Query1.work[k+1];
            }
            if (tabel == "Persons"){activitate =Query1.slujire[k];
            activitate1=Query1.slujire[k+1];
        }
            if (tabel == "Transferati"){

                String data_pt_transfer1 = ConversUserData.con_home_search1(Query1.transfer[k]);
                String data_pt_transfer11 = ConversUserData.con_home_search1(Query1.transfer[k+1]);


                activitate =""+data_pt_transfer1;
            activitate1=data_pt_transfer11;
            }else {
            }
        if (tabel == "Decedati"){ String data_pt_transfer1 = ConversUserData.con_home_search1(Query1.transfer[k]);
            String data_pt_transfer11 = ConversUserData.con_home_search1(Query1.transfer[k+1]);


            activitate =""+data_pt_transfer1;
            activitate1=data_pt_transfer11;
        }else {
        }


            if (Query1.id[k] == null ) {
            } else {
                String nastere = ConversUserData.con_home_search1(Query1.birthDate[k]);
                String data_pt_varsta = Query1.birthDate[k];
                data_calendaristica.initiere_data(data_pt_varsta);
                if (nastere.length() < 1) {
                    data_calendaristica.an_final = " ";
                }
                model.addRow(new Object[]{k, Query1.firstName[k] + " " + Query1.lastName[k], data_calendaristica.an_final + " " + nastere, Query1.adress[k], Query1.tel1[k], alege, activitate});


                if (raporthtml == 1) {




                        String noua_data = "";
                        try {
                            char[] c_arr = Query1.tel1[k].toCharArray();

                            String x = Query1.tel1[k];
                            //String x = Integer.toString(j);
                            x = x.substring(0, 4) + "-" + x.substring(4, x.length());
                            //  String      noua_data1 = "" + c_arr[0] + c_arr[1] + c_arr[2] + c_arr[3] +"-"+ c_arr[4] + c_arr[5] + c_arr[6] + c_arr[7]+ c_arr[8]+ c_arr[9] + c_arr[10] + c_arr[11]+ c_arr[12];
                            noua_data = x.replaceAll("\\p{javaSpaceChar}", "");
                              // noua_data=x;
                        } catch (Exception e) {//JOptionPane.showMessageDialog(null,"Telefonul nu a putut fi cratimizat pentru html");
                            //
                        }
                        String imagine = "";

                        if (Query1.slujire[k] == null) {
                            Query1.slujire[k] = "";
                        }
                        String whole = Query1.firstName[k];
                        String first = whole.substring(0, 1);
                    try {
                        MainFrame.scurtatura_imagine(Query1.pi[k]);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }


                    if (Query1.pi[k].length() < 2) {

                          imagine = "&nbsp"+first+"&nbsp&nbsp" ;
                        } else {

                            imagine="<img src='" + MainFrame.reverse2 + "' onerror=this.src='Default.jpg'   ' height='70' width='65' >";

                        }
//#cc9337


                    System.setProperty("file.encoding","UTF-8");
                    Field charset = null;
                    try {
                        charset = Charset.class.getDeclaredField("defaultCharset");
                    } catch (NoSuchFieldException e) {
                        e.printStackTrace();
                    }
                    charset.setAccessible(true);
                    try {
                        charset.set(null,null);
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                    //    System.setProperty("file.encoding", "UTF-16");
                    try (FileWriter fw = new FileWriter(Scriere_fisier_html.nume_fisier, true);
                         BufferedWriter bw = new BufferedWriter(fw);
                         PrintWriter out = new PrintWriter(bw)) {
                        System.setProperty("file.encoding","UTF-8");

                    fel_tabel="";
                        if (raporthtml == 1) {

                        if (tabel=="Decedati"){fel_tabel="d";}
                        if (tabel=="Persons"){fel_tabel="";}
                        if (tabel=="Apartinatori"){fel_tabel="a";}
                            out.print("<li> <a href='./html/" + Query1.id[k] +fel_tabel+ ".html'> <table> <td><font color='#725232' size='8'>"+imagine+"</font></td>" + "<td></a><b><font style='font-family: Times New Roman;  size = '5'> <font size='4' color='#374468'>" + Query1.firstName[k] + " " + Query1.lastName[k] + "</font></font></b>" +
                                   " <font color='grey' size='4'>   " + nastere + " " + data_calendaristica.an_final + " </font><font  color='#f4b042'><a href='tel:"+noua_data+"'> <Font color='#f7ddc5'>" + Query1.tel1[k] + "</font></a>  " +



                                    "  </td></table></a></A></li> ");
                        }
                        System.setProperty("file.encoding", "UTF-16");

                        //out.println( "<tr><td> "+k+  "</td> <td> "+Query1.firstName[k]+" </td></tr>"); // \"+ Query1.lastName[k],data_calendaristica.an_final+\" \"+nastere , Query1.adress[k], Query1.tel1[k],  alege, activitate});");
                        //more code
                       out.close();
                       //more code
                   } catch (IOException e) {
                       //exception handling left as an exercise for the reader


                   }

                    Writer out1 = null;
                    try {
                        out1 = new BufferedWriter(new OutputStreamWriter(
                                new FileOutputStream("./html/" + Query1.id[k] + ".html"), "UTF-8"));
                        System.setProperty("file.encoding", "UTF-16");
                    } catch (UnsupportedEncodingException e) {
                        e.printStackTrace();
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
                    try {
                        out1.write("<!DOCTYPE html>\n" +
                                "<html>\n" +
                                "<head>\n" +
                                "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n" +
                                "<style>\n" +
                                "img {\n" +
                                "  border-radius: 10%;\n" +
                                "}\n" +
                                "</style>\n" +
                                "</head>\n" +
                                "<body>\n" +
                                "\n" +
                                "<h2><CENTER>"+Query1.firstName[k]+ " " + Query1.lastName[k]+"</h2>\n" +
                                "\n" +
                               " <body style='background-color:#e6f2d9'>"+
                                "<img src='."+reverse2+"' alt=\"Avatar\" style=  \"width:240px\">\n" +
                                "\n" +

                                "<br><font color='gray'>Data nașterii:</font>"+nastere + " " +data_calendaristica.an_final+
                                "<br><font color='gray'> Slujire: </font>"+Query1.slujire[k]+
                                "<br><font color='gray'> Starea civilă:</font>"+Query1.wife[k]+
                                "<br><font color='gray'>Copii: </font>"+Query1.children[k]+
                                "<br><font color='gray'>Pregătire: </font>"+Query1.school[k]+
                                "<br><font color='gray'>Loc de muncă:</font> "+Query1.work[k]+
                                "<br><font color='gray'>Telefon:</font> "+Query1.tel1[k]+
                                "<br><font color='gray'>email: </font>"+Query1.email[k]+
                                "<br><font color='gray'>Adresă: </font>"+Query1.adress[k]+
                                "<br><font color='gray'>Alte informații:</font> "+Query1.others[k]+


                                "</CENTER></body></html>");

                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            out1.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                    }


                }


            }



           }


        if (raporthtml==1) {


            try (FileWriter fw = new FileWriter(Scriere_fisier_html.nume_fisier, true);
                 BufferedWriter bw = new BufferedWriter(fw);
                 PrintWriter out = new PrintWriter(bw)) {

                //more code
                out.println(" </ul>\n" +
                        "\n" +
                        "<script>\n" +
                        "function myFunction() {\n" +
                        "    var input, filter, ul, li, a, i;\n" +
                        "    input = document.getElementById(\"myInput\");\n" +
                        "    filter = input.value.toUpperCase();\n" +
                        "    ul = document.getElementById(\"myUL\");\n" +
                        "    li = ul.getElementsByTagName(\"li\");\n" +
                        "    for (i = 0; i < li.length; i++) {\n" +
                        "        a = li[i].getElementsByTagName(\"a\")[0];\n" +
                        "        if (a.innerHTML.toUpperCase().indexOf(filter) > -1) {\n" +
                        "            li[i].style.display = \"\";\n" +
                        "        } else {\n" +
                        "            li[i].style.display = \"none\";\n" +
                        "\n" +
                        "        }\n" +
                        "    }\n" +
                        "}\n" +
                        "</script>\n" +
                        "\n" +
                        "</body>\n" +
                        "</html>");
                //more code
            } catch (IOException e) {
                //exception handling left as an exercise for the reader
            }

        }
    }






    private void jButton2MouseClicked(MouseEvent evt) {
    // TODO add your handling code here:
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
    try {
      for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>







    /* Create and display the form */
    EventQueue.invokeLater(new Runnable() {
      public void run() {


          try {
              new MainFrame().setVisible(true);
          } catch (IOException e) {
              e.printStackTrace();
          }
      }
    });
  }
public static void scurtatura_imagine(String img) throws IOException {


//
    String reverse = new StringBuffer(img).reverse().toString();

  //  System.out.println("HHHHHHHHHHHHHHHEEEEEEEEEEEEEELLLLLLLLLLLOOOOOOOOOO>: " + reverse);

    int s = reverse.length();

String nume="";
int nr_delimitare=0;
    for (int i = 0; i < s; i++) {


        if (reverse.charAt(i) == (char)92 ) {
       //     System.out.println("exista la char " + i);
            nr_delimitare=nr_delimitare+1;
        }


        if (nr_delimitare==0){
            nume =nume+reverse.charAt(i);
        }


    }
    String current = new java.io.File( "." ).getCanonicalPath();
 //   System.out.println("Current dir:"+current);
    String invers= new StringBuffer(nume).reverse().toString();
   if  (invers.length()<5){ invers="Default.jpg";}
    reverse1 = "";
    reverse1 = current+"\\pcts\\"+invers;
    reverse2 = "";
    reverse2 = "./pcts/"+invers;
  //  System.out.println("nume fisier este: "+ current+ reverse1);

}
    public static void exit(int i) {
        System.exit(0);
    }

    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenustatistici;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenucauta;
    private javax.swing.JMenuBar jMenuBar1;
   // private JButton jButton2;
    private JButton jButton16;
    private JButton jButton11;
    private JButton jButton12;
    private JButton jButton13;
    private JLabel jButtonadresa;
    private JLabel jButtonwork;
    private JLabel jButtonwidow;
    private JLabel jButtonold_man;
    private JLabel jButtoncalendar;
    private JLabel jButtonslujire;
    private JLabel jButtonage;
    private JButton jButton14;
    private JButton jButton15;
    private JButton jButton17;
    private JButton jButton1;
    private JButton jButton4;
    private JButton jButton5;
    private JButton jButton3;
    private JButton jButtond;
   public JMenuItem jButtonprint;
    private JButton jButtonc;



    // Variables declaration - do not modify
  private JButton jButton2;
    private JButton jButtonBack;
  public static JLabel jLabel1;
  private JLabel jLabel2;
  private JLabel jLabel5;
  private JLabel jLabel6;
  private JPanel jPanel1;
  private JPanel jPanel2;
  private JPanel jPanel4;
  private JPanel jPanel5;
  private JPanel jPanel6;
  private JPanel jPanel8;

  private JButton jButtonRefresh;
  private JButton jRadioButton2;
  private JButton jcautarezin;
  private JScrollPane jScrollPane1;
  public static  JTable jTable1;
  public static JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
  // End of variables declaration
}
